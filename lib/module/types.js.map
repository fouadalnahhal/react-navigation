{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type {\r\n  HeaderBackButton,\r\n  HeaderBackButtonProps,\r\n  HeaderButtonProps,\r\n  HeaderOptions,\r\n  HeaderTitleProps,\r\n} from '@react-navigation/elements';\r\nimport type {\r\n  Descriptor,\r\n  NavigationHelpers,\r\n  NavigationProp,\r\n  ParamListBase,\r\n  Route,\r\n  RouteProp,\r\n  StackActionHelpers,\r\n  StackNavigationState,\r\n} from '@react-navigation/native';\r\nimport type * as React from 'react';\r\nimport type { Animated, StyleProp, TextStyle, ViewStyle } from 'react-native';\r\n\r\nexport type StackNavigationEventMap = {\r\n  /**\r\n   * Event which fires when a transition animation starts.\r\n   */\r\n  transitionStart: { data: { closing: boolean } };\r\n  /**\r\n   * Event which fires when a transition animation ends.\r\n   */\r\n  transitionEnd: { data: { closing: boolean } };\r\n  /**\r\n   * Event which fires when navigation gesture starts.\r\n   */\r\n  gestureStart: { data: undefined };\r\n  /**\r\n   * Event which fires when navigation gesture is completed.\r\n   */\r\n  gestureEnd: { data: undefined };\r\n  /**\r\n   * Event which fires when navigation gesture is canceled.\r\n   */\r\n  gestureCancel: { data: undefined };\r\n};\r\n\r\nexport type StackNavigationHelpers = NavigationHelpers<\r\n  ParamListBase,\r\n  StackNavigationEventMap\r\n> &\r\n  StackActionHelpers<ParamListBase>;\r\n\r\nexport type StackNavigationProp<\r\n  ParamList extends ParamListBase,\r\n  RouteName extends keyof ParamList = keyof ParamList,\r\n  NavigatorID extends string | undefined = undefined\r\n> = NavigationProp<\r\n  ParamList,\r\n  RouteName,\r\n  NavigatorID,\r\n  StackNavigationState<ParamList>,\r\n  StackNavigationOptions,\r\n  StackNavigationEventMap\r\n> &\r\n  StackActionHelpers<ParamList>;\r\n\r\nexport type StackScreenProps<\r\n  ParamList extends ParamListBase,\r\n  RouteName extends keyof ParamList = keyof ParamList,\r\n  NavigatorID extends string | undefined = undefined\r\n> = {\r\n  navigation: StackNavigationProp<ParamList, RouteName, NavigatorID>;\r\n  route: RouteProp<ParamList, RouteName>;\r\n};\r\n\r\nexport type Layout = { width: number; height: number };\r\n\r\nexport type GestureDirection =\r\n  | 'horizontal'\r\n  | 'horizontal-inverted'\r\n  | 'vertical'\r\n  | 'vertical-inverted';\r\n\r\ntype SceneOptionsDefaults = TransitionPreset & {\r\n  animationEnabled: boolean;\r\n  gestureEnabled: boolean;\r\n  cardOverlayEnabled: boolean;\r\n  headerMode: StackHeaderMode;\r\n};\r\n\r\nexport type Scene = {\r\n  /**\r\n   * Route object for the current screen.\r\n   */\r\n  route: Route<string>;\r\n  /**\r\n   * Descriptor object for the screen.\r\n   */\r\n  descriptor: Omit<StackDescriptor, 'options'> & {\r\n    options: Omit<StackDescriptor['options'], keyof SceneOptionsDefaults> &\r\n      SceneOptionsDefaults;\r\n  };\r\n  /**\r\n   * Animated nodes representing the progress of the animation.\r\n   */\r\n  progress: SceneProgress;\r\n};\r\n\r\nexport type SceneProgress = {\r\n  /**\r\n   * Progress value of the current screen.\r\n   */\r\n  current: Animated.AnimatedInterpolation;\r\n  /**\r\n   * Progress value for the screen after this one in the stack.\r\n   * This can be `undefined` in case the screen animating is the last one.\r\n   */\r\n  next?: Animated.AnimatedInterpolation;\r\n  /**\r\n   * Progress value for the screen before this one in the stack.\r\n   * This can be `undefined` in case the screen animating is the first one.\r\n   */\r\n  previous?: Animated.AnimatedInterpolation;\r\n};\r\n\r\nexport type StackHeaderMode = 'float' | 'screen';\r\n\r\nexport type StackPresentationMode = 'card' | 'modal';\r\n\r\nexport type StackHeaderOptions = Omit<\r\n  HeaderOptions,\r\n  'headerLeft' | 'headerTitle' | 'headerRight'\r\n> & {\r\n  /**\r\n   * String or a function that returns a React Element to be used by the header.\r\n   * Defaults to screen `title` or route name.\r\n   *\r\n   * It receives `allowFontScaling`, `tintColor`, `style` and `children` in the options object as an argument.\r\n   * The title string is passed in `children`.\r\n   */\r\n  headerTitle?: string | ((props: HeaderTitleProps) => React.ReactNode);\r\n  /**\r\n   * Function which returns a React Element to display on the left side of the header.\r\n   */\r\n  headerLeft?: (props: HeaderBackButtonProps) => React.ReactNode;\r\n  /**\r\n   * Function which returns a React Element to display on the right side of the header.\r\n   */\r\n  headerRight?: (props: HeaderButtonProps) => React.ReactNode;\r\n  /**\r\n   * Whether back button title font should scale to respect Text Size accessibility settings. Defaults to `false`.\r\n   */\r\n  headerBackAllowFontScaling?: boolean;\r\n  /**\r\n   * Accessibility label for the header back button.\r\n   */\r\n  headerBackAccessibilityLabel?: string;\r\n  /**\r\n   * ID to locate this back button in tests.\r\n   */\r\n  headerBackTestID?: string;\r\n  /**\r\n   * Title string used by the back button on iOS.\r\n   * Defaults to the previous screen's title, or \"Back\" if there's not enough space.\r\n   * Use `headerBackTitleVisible: false` to hide it.\r\n   */\r\n  headerBackTitle?: string;\r\n  /**\r\n   * Whether the back button title should be visible or not.\r\n   *\r\n   * Defaults to `true` on iOS, `false on Android.\r\n   */\r\n  headerBackTitleVisible?: boolean;\r\n  /**\r\n   * Style object for the back title.\r\n   */\r\n  headerBackTitleStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * Title string used by the back button when `headerBackTitle` doesn't fit on the screen. `\"Back\"` by default.\r\n   */\r\n  headerTruncatedBackTitle?: string;\r\n  /**\r\n   * Function which returns a React Element to display custom image in header's back button.\r\n   * It receives the `tintColor` in in the options object as an argument. object.\r\n   * Defaults to Image component with a the default back icon image for the platform (a chevron on iOS and an arrow on Android).\r\n   */\r\n  headerBackImage?: React.ComponentProps<typeof HeaderBackButton>['backImage'];\r\n};\r\n\r\nexport type StackHeaderProps = {\r\n  /**\r\n   * Layout of the screen.\r\n   */\r\n  layout: Layout;\r\n  /**\r\n   * Options for the back button.\r\n   */\r\n  back?: {\r\n    /**\r\n     * Title of the previous screen.\r\n     */\r\n    title: string;\r\n  };\r\n  /**\r\n   * Animated nodes representing the progress of the animation.\r\n   */\r\n  progress: SceneProgress;\r\n  /**\r\n   * Options for the current screen.\r\n   */\r\n  options: StackNavigationOptions;\r\n  /**\r\n   * Route object for the current screen.\r\n   */\r\n  route: Route<string>;\r\n  /**\r\n   * Navigation prop for the header.\r\n   */\r\n  navigation: StackNavigationProp<ParamListBase>;\r\n  /**\r\n   * Interpolated styles for various elements in the header.\r\n   */\r\n  styleInterpolator: StackHeaderStyleInterpolator;\r\n};\r\n\r\nexport type StackDescriptor = Descriptor<\r\n  StackNavigationOptions,\r\n  StackNavigationProp<ParamListBase>,\r\n  RouteProp<ParamListBase>\r\n>;\r\n\r\nexport type StackDescriptorMap = Record<string, StackDescriptor>;\r\n\r\nexport type StackNavigationOptions = StackHeaderOptions &\r\n  Partial<TransitionPreset> & {\r\n    /**\r\n     * String that can be displayed in the header as a fallback for `headerTitle`.\r\n     */\r\n    title?: string;\r\n    /**\r\n     * Function that given `HeaderProps` returns a React Element to display as a header.\r\n     */\r\n    header?: (props: StackHeaderProps) => React.ReactNode;\r\n    /**\r\n     * Whether the header floats above the screen or part of the screen.\r\n     * Defaults to `float` on iOS for non-modals, and `screen` for the rest.\r\n     */\r\n    headerMode?: StackHeaderMode;\r\n    /**\r\n     * Whether to show the header. The header is shown by default.\r\n     * Setting this to `false` hides the header.\r\n     */\r\n    headerShown?: boolean;\r\n    /**\r\n     * Whether a shadow is visible for the card during transitions. Defaults to `true`.\r\n     */\r\n    cardShadowEnabled?: boolean;\r\n    /**\r\n     * Whether to have a semi-transparent dark overlay visible under the card during transitions.\r\n     * Defaults to `true` on Android and `false` on iOS.\r\n     */\r\n    cardOverlayEnabled?: boolean;\r\n    /**\r\n     * Function that returns a React Element to display as a overlay for the card.\r\n     */\r\n    cardOverlay?: (props: {\r\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n    }) => React.ReactNode;\r\n    /**\r\n     * Style object for the card in stack.\r\n     * You can provide a custom background color to use instead of the default background here.\r\n     *\r\n     * You can also specify `{ backgroundColor: 'transparent' }` to make the previous screen visible underneath.\r\n     * This is useful to implement things like modal dialogs.\r\n     *\r\n     * You should also specify `detachPreviousScreen: false` in options when using a transparent background\r\n     * so that the previous screen isn't detached and stays below the current screen.\r\n     *\r\n     * You might also need to change the animation of the screen using `cardStyleInterpolator`\r\n     * so that the previous screen isn't transformed or invisible.\r\n     */\r\n    cardStyle?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Whether this screen should be presented as a modal or a regular card.\r\n     *\r\n     * Specifying this will configure several options:\r\n     * - `card`: Use the default OS animations for iOS and Android screen transitions.\r\n     * - `modal`: Use Modal animations. This changes a few things:\r\n     *   - Sets `headerMode` to `screen` for the screen unless specified otherwise.\r\n     *   - Changes the screen animation to match the platform behavior for modals.\r\n     * - `transparentModal`: Similar to `modal`. This changes following things:\r\n     *   - Sets `headerMode` to `screen` for the screen unless specified otherwise.\r\n     *   - Sets background color of the screen to transparent, so previous screen is visible\r\n     *   - Adjusts the `detachPreviousScreen` option so that the previous screen stays rendered.\r\n     *   - Prevents the previous screen from animating from its last position.\r\n     *   - Changes the screen animation to a vertical slide animation.\r\n     *\r\n     * Defaults to 'card'.\r\n     */\r\n    presentation?: 'card' | 'modal' | 'transparentModal';\r\n    /**\r\n     * Whether transition animation should be enabled the screen.\r\n     * If you set it to `false`, the screen won't animate when pushing or popping.\r\n     * Defaults to `true` on Android and iOS, `false` on Web.\r\n     */\r\n    animationEnabled?: boolean;\r\n    /**\r\n     * The type of animation to use when this screen replaces another screen. Defaults to `push`.\r\n     * When `pop` is used, the `pop` animation is applied to the screen being replaced.\r\n     */\r\n    animationTypeForReplace?: 'push' | 'pop';\r\n    /**\r\n     * Whether you can use gestures to dismiss this screen. Defaults to `true` on iOS, `false` on Android.\r\n     * Not supported on Web.\r\n     */\r\n    gestureEnabled?: boolean;\r\n    /**\r\n     * Distance of touch start from the edge of the screen to recognize gestures.\r\n     * Not supported on Web.\r\n     */\r\n    gestureResponseDistance?: number;\r\n    /**\r\n     * Number which determines the relevance of velocity for the gesture. Defaults to 0.3.\r\n     * Not supported on Web.\r\n     */\r\n    gestureVelocityImpact?: number;\r\n    /**\r\n     * Whether to detach the previous screen from the view hierarchy to save memory.\r\n     * Set it to `false` if you need the previous screen to be seen through the active screen.\r\n     * Only applicable if `detachInactiveScreens` isn't set to `false`.\r\n     * Defaults to `false` for the last screen for modals, otherwise `true`.\r\n     */\r\n    detachPreviousScreen?: boolean;\r\n    /**\r\n     * If `false`, the keyboard will NOT automatically dismiss when navigating to a new screen from this screen.\r\n     * Defaults to `true`.\r\n     */\r\n    keyboardHandlingEnabled?: boolean;\r\n    /**\r\n     * Whether inactive screens should be suspended from re-rendering. Defaults to `false`.\r\n     * Defaults to `true` when `enableFreeze()` is run at the top of the application.\r\n     * Requires `react-native-screens` version >=3.16.0.\r\n     *\r\n     * Only supported on iOS and Android.\r\n     */\r\n    freezeOnBlur?: boolean;\r\n  };\r\n\r\nexport type StackNavigationConfig = {\r\n  /**\r\n   * Whether inactive screens should be detached from the view hierarchy to save memory.\r\n   * This will have no effect if you disable `react-native-screens`.\r\n   *\r\n   * Defaults to `true`.\r\n   */\r\n  detachInactiveScreens?: boolean;\r\n};\r\n\r\nexport type TransitionSpec =\r\n  | {\r\n      animation: 'spring';\r\n      config: Omit<\r\n        Animated.SpringAnimationConfig,\r\n        'toValue' | keyof Animated.AnimationConfig\r\n      >;\r\n    }\r\n  | {\r\n      animation: 'timing';\r\n      config: Omit<\r\n        Animated.TimingAnimationConfig,\r\n        'toValue' | keyof Animated.AnimationConfig\r\n      >;\r\n    };\r\n\r\nexport type StackCardInterpolationProps = {\r\n  /**\r\n   * Values for the current screen.\r\n   */\r\n  current: {\r\n    /**\r\n     * Animated node representing the progress value of the current screen.\r\n     */\r\n    progress: Animated.AnimatedInterpolation;\r\n  };\r\n  /**\r\n   * Values for the screen after this one in the stack.\r\n   * This can be `undefined` in case the screen animating is the last one.\r\n   */\r\n  next?: {\r\n    /**\r\n     * Animated node representing the progress value of the next screen.\r\n     */\r\n    progress: Animated.AnimatedInterpolation;\r\n  };\r\n  /**\r\n   * The index of the card with this interpolation in the stack.\r\n   */\r\n  index: number;\r\n  /**\r\n   * Animated node representing whether the card is closing (1 - closing, 0 - not closing).\r\n   */\r\n  closing: Animated.AnimatedInterpolation;\r\n  /**\r\n   * Animated node representing whether the card is being swiped (1 - swiping, 0 - not swiping).\r\n   */\r\n  swiping: Animated.AnimatedInterpolation;\r\n  /**\r\n   * Animated node representing multiplier when direction is inverted (-1 - inverted, 1 - normal).\r\n   */\r\n  inverted: Animated.AnimatedInterpolation;\r\n  /**\r\n   * Layout measurements for various items we use for animation.\r\n   */\r\n  layouts: {\r\n    /**\r\n     * Layout of the whole screen.\r\n     */\r\n    screen: Layout;\r\n  };\r\n  /**\r\n   * Safe area insets\r\n   */\r\n  insets: {\r\n    top: number;\r\n    right: number;\r\n    bottom: number;\r\n    left: number;\r\n  };\r\n};\r\n\r\nexport type StackCardInterpolatedStyle = {\r\n  /**\r\n   * Interpolated style for the container view wrapping the card.\r\n   */\r\n  containerStyle?: any;\r\n  /**\r\n   * Interpolated style for the view representing the card.\r\n   */\r\n  cardStyle?: any;\r\n  /**\r\n   * Interpolated style for the view representing the semi-transparent overlay below the card.\r\n   */\r\n  overlayStyle?: any;\r\n  /**\r\n   * Interpolated style representing the card shadow.\r\n   */\r\n  shadowStyle?: any;\r\n};\r\n\r\nexport type StackCardStyleInterpolator = (\r\n  props: StackCardInterpolationProps\r\n) => StackCardInterpolatedStyle;\r\n\r\nexport type StackHeaderInterpolationProps = {\r\n  /**\r\n   * Values for the current screen (the screen which owns this header).\r\n   */\r\n  current: {\r\n    /**\r\n     * Animated node representing the progress value of the current screen.\r\n     */\r\n    progress: Animated.AnimatedInterpolation;\r\n  };\r\n  /**\r\n   * Values for the screen after this one in the stack.\r\n   * This can be `undefined` in case the screen animating is the last one.\r\n   */\r\n  next?: {\r\n    /**\r\n     * Animated node representing the progress value of the next screen.\r\n     */\r\n    progress: Animated.AnimatedInterpolation;\r\n  };\r\n  /**\r\n   * Layout measurements for various items we use for animation.\r\n   */\r\n  layouts: {\r\n    /**\r\n     * Layout of the header\r\n     */\r\n    header: Layout;\r\n    /**\r\n     * Layout of the whole screen.\r\n     */\r\n    screen: Layout;\r\n    /**\r\n     * Layout of the title element.\r\n     */\r\n    title?: Layout;\r\n    /**\r\n     * Layout of the back button label.\r\n     */\r\n    leftLabel?: Layout;\r\n  };\r\n};\r\n\r\nexport type StackHeaderInterpolatedStyle = {\r\n  /**\r\n   * Interpolated style for the label of the left button (back button label).\r\n   */\r\n  leftLabelStyle?: any;\r\n  /**\r\n   * Interpolated style for the left button (usually the back button).\r\n   */\r\n  leftButtonStyle?: any;\r\n  /**\r\n   * Interpolated style for the right button.\r\n   */\r\n  rightButtonStyle?: any;\r\n  /**\r\n   * Interpolated style for the header title text.\r\n   */\r\n  titleStyle?: any;\r\n  /**\r\n   * Interpolated style for the header background.\r\n   */\r\n  backgroundStyle?: any;\r\n};\r\n\r\nexport type StackHeaderStyleInterpolator = (\r\n  props: StackHeaderInterpolationProps\r\n) => StackHeaderInterpolatedStyle;\r\n\r\nexport type TransitionPreset = {\r\n  /**\r\n   * The direction of swipe gestures, `horizontal` or `vertical`.\r\n   */\r\n  gestureDirection: GestureDirection;\r\n  /**\r\n   * Object which specifies the animation type (timing or spring) and their options (such as duration for timing).\r\n   */\r\n  transitionSpec: {\r\n    /**\r\n     * Transition configuration when adding a screen.\r\n     */\r\n    open: TransitionSpec;\r\n    /**\r\n     * Transition configuration when removing a screen.\r\n     */\r\n    close: TransitionSpec;\r\n  };\r\n  /**\r\n   * Function which specifies interpolated styles for various parts of the card, e.g. the overlay, shadow etc.\r\n   */\r\n  cardStyleInterpolator: StackCardStyleInterpolator;\r\n  /**\r\n   * Function which specifies interpolated styles for various parts of the header, e.g. the title, left button etc.\r\n   */\r\n  headerStyleInterpolator: StackHeaderStyleInterpolator;\r\n};\r\n"],"mappings":""}